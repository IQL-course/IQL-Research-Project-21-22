length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('optimality_scores_',collection,suffix,corr_suffix,'.csv')))[-1] %>%
dplyr::select(L,eta,psi,omega)
df
plot_corrplot_scores(df,'pearson')
# + correlogram of opt scores
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('optimality_scores_',collection,suffix,corr_suffix,'.csv')))[-1] %>%
dplyr::select(L,eta,psi,omega)
plot_corrplot_scores(df,'pearson')
ggsave(here('figures',paste0('corrplot_',collection,suffix,corr_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('optimality_scores_',collection,suffix,corr_suffix,'.csv')))[-1] %>%
dplyr::select(L,eta,psi,omega)
plot_corrplot_scores(df,'pearson')
ggsave(here('figures',paste0('corrplot_',collection,suffix,corr_suffix,'.pdf')))
}
})
corr_suffix
# + correlogram of opt scores
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('optimality_scores_',collection,suffix,corr_suffix,'.csv')))[-1] %>%
dplyr::select(L,eta,psi,omega)
plot_corrplot_scores(df,'pearson')
ggsave(here('figures',paste0('corrplot_',collection,suffix,corr_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('optimality_scores_',collection,suffix,corr_suffix,'.csv')))[-1] %>%
dplyr::select(L,eta,psi,omega)
plot_corrplot_scores(df,'pearson')
ggsave(here('figures',paste0('corrplot_',collection,suffix,corr_suffix,'.pdf')))
}
})
plot_corrplot_null <- function(df,corr_type) {
df <- df %>% mutate(`Lmin/Lrand`=Lmin/Lrand) %>% dplyr::select(Lmin,Lrand,`Lmin/Lrand`,eta,psi,omega) %>%
rename(`E[eta]`=eta, `E[psi]`=psi, `E[omega]`=omega)
cors <- round(cor(df,method='pearson'), 2)
p.mat <- cor_pmat(df)
ggcorrplot(cors, type = "lower", p.mat = p.mat, lab=T, lab_size = 6, tl.cex = 15, pch.cex = 20,
colors = switch(corr_type,'kendall'=corr_colors_tau,'pearson'=corr_colors_r)) +
labs(title=paste(collection,length_def,sep='-'),subtitle='Under null hypothesis') +
theme(plot.title = element_text(size=22),plot.subtitle = element_text(size=16))
}
plot_corr <- 'kendall'
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
remove_out
## correlation wit Lmin, Lr, and Lmin/Lr
remove_out <- F
length_def
collection
collection = 'cv'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
plot_corrplot_null <- function(df,corr_type) {
df <- df %>% mutate(`Lmin/Lrand`=Lmin/Lrand) %>% dplyr::select(Lmin,Lrand,`Lmin/Lrand`,eta,psi,omega) %>%
rename(`E[eta]`=eta, `E[psi]`=psi, `E[omega]`=omega)
cors <- round(cor(df,method='pearson'), 2)
p.mat <- cor_pmat(df)
ggcorrplot(cors, type = "lower", p.mat = p.mat, lab=T, lab_size = 6, tl.cex = 15, pch.cex = 20,
colors = switch(corr_type,'kendall'=corr_colors_tau,'pearson'=corr_colors_r)) +
labs(title=paste(collection,length_def,sep='-'),subtitle='Under null hypothesis') +
theme(plot.title = element_text(size=22),plot.subtitle = element_text(size=16))
}
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
df <- df %>% mutate(`Lmin/Lrand`=Lmin/Lrand) %>% dplyr::select(Lmin,Lrand,`Lmin/Lrand`,eta,psi,omega) %>%
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
}
})
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
}
})
out_suffix
## correlation wit Lmin, Lr, and Lmin/Lr
remove_out <- F
plot_corr <- 'kendall'
out_suffix <- ifelse(remove_out==T,'_noOut','')
out_suffix
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
}
})
corr_suffix
## correlation wit Lmin, Lr, and Lmin/Lr
remove_out <- T
plot_corr <- 'kendall'
out_suffix <- ifelse(remove_out==T,'_noOut','')
plot_corrplot_null <- function(df,corr_type) {
df <- df %>% mutate(`Lmin/Lrand`=Lmin/Lrand) %>% dplyr::select(Lmin,Lrand,`Lmin/Lrand`,eta,psi,omega) %>%
rename(`E[eta]`=eta, `E[psi]`=psi, `E[omega]`=omega)
cors <- round(cor(df,method='pearson'), 2)
p.mat <- cor_pmat(df)
ggcorrplot(cors, type = "lower", p.mat = p.mat, lab=T, lab_size = 6, tl.cex = 15, pch.cex = 20,
colors = switch(corr_type,'kendall'=corr_colors_tau,'pearson'=corr_colors_r)) +
labs(title=paste(collection,length_def,sep='-'),subtitle='Under null hypothesis') +
theme(plot.title = element_text(size=22),plot.subtitle = element_text(size=16))
}
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
})
} else {
length_def <- 'characters'
suffix       <- paste0("_",length_def)
df <- read.csv(here('results',paste0('null_hypothesis_',collection,suffix,'_',iters,corr_suffix,'.csv')))[-1]
if (remove_out == T) df <-  df %>% filter(language %!in% c('Abkhazian','Panjabi'))
plot_corrplot_null(df,plot_corr)
ggsave(here('figures',paste0('corrplot_null_',collection,suffix,corr_suffix,out_suffix,'.pdf')))
}
})
plotRanks <- function(a, b, labels.offset=0.1, arrow.len=0.1,title) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
collection
suffix
corr_suffix
# + ranking of Duration VS time
df <- read.csv(here('results',paste0('optimality_scores_cv',suffix,corr_suffix,'.csv')))[-1]
df
# + ranking of Duration VS time
langs_characters <- read.csv(here('results',paste0('optimality_scores_cv_characters',corr_suffix,'.csv')))[-1] %>%
arrange(psi) %>% dplyr::select(language)
langs_duration <- read.csv(here('results',paste0('optimality_scores_cv_medianDuration',corr_suffix,'.csv')))[-1] %>%
arrange(psi) %>% dplyr::select(language)
langs_characters
langs_duration
# + ranking of Duration VS time
langs_characters <- read.csv(here('results',paste0('optimality_scores_cv_characters',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi)) %>% dplyr::select(language)
langs_duration <- read.csv(here('results',paste0('optimality_scores_cv_medianDuration',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi)) %>% dplyr::select(language)
langs_duration
plotRanks <- function(a, b, labels.offset=0.1, arrow.len=0.1,title) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters - duration')
plotRanks(langs_characters,langs_duration, 'characters - duration')
langs_duration
# + ranking of Duration VS time
langs_characters <- read.csv(here('results',paste0('optimality_scores_cv_characters',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi)) %>% dplyr::select(language) %>% as.vector()
langs_duration <- read.csv(here('results',paste0('optimality_scores_cv_medianDuration',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi)) %>% dplyr::select(language) %>% as.vector()
plotRanks(langs_characters,langs_duration, 'characters - duration')
langs_duration
# + ranking of Duration VS time
langs_characters_df <- read.csv(here('results',paste0('optimality_scores_cv_characters',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi))
langs_duration_df <- read.csv(here('results',paste0('optimality_scores_cv_medianDuration',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi))
langs_characters <- langs_characters_df$language
langs_characters
# + ranking of Duration VS time
langs_characters_df <- read.csv(here('results',paste0('optimality_scores_cv_characters',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi))
langs_characters <- langs_characters_df$language
langs_duration_df <- read.csv(here('results',paste0('optimality_scores_cv_medianDuration',corr_suffix,'.csv')))[-1] %>%
arrange(desc(psi))
langs_duration <- langs_duration_df$language
plotRanks(langs_characters,langs_duration, 'characters - duration')
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.2)
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.4)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.4)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.5,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.4)
?text
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.5,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.5)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.5)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
?text
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.4)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.5,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.4)
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.2)
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.5,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20, col = 'red')
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
a <- langs_characters
b <- langs_duration
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
len.1
len.2
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=18, cex=0.5,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
labels.offset=0.1
arrow.len=0.1
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
a.to.b
a <- c('a','b','c')
b <- c('b','c','a')
# Map where the elements of a are in b
a.to.b <- match(a, b)
a.to.b
ifelse(1:length(a)-a.to.b <=2,T,F)
ifelse(1:length(a)-a.to.b <=1,T,F)
ifelse(abs(1:length(a)-a.to.b) <=1,T,F)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20, col =  ifelse(abs(1:length(a)-a.to.b) <=5,'red','black'))
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20, col =  ifelse(abs(1:length(a)-a.to.b) >5,'red','black'))
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
plotRanks <- function(a, b, title, labels.offset=0.1, arrow.len=0.1) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a, cex=0.7)
text(rep(2+labels.offset, len.2), 1:len.2, b, cex=0.7)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20, col =  ifelse(abs(1:length(a)-a.to.b) >10,'red','black'))
par(old.par)
}
plotRanks(langs_characters,langs_duration, 'characters   -   duration',labels.offset = 0.3)
corr_suffix
ggsave(here('figures',paste0(score,'_timeVSspace_ranks',corr_suffix,'.pdf')))
