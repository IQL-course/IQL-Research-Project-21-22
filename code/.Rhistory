r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(10,15)] <- 1
r5$color[c(10,15)] <- 1
r6$color[c(10,15)] <- 1
r7$color[c(9,11,14)] <- 1
r8$color[c(8,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r1 <- list(r=rep('r1',20),pixels = 1:20,color = rep(0,20))
r2 <- list(r=rep('r2',20),pixels = 1:20,color = rep(0,20))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(10,15)] <- 1
r5$color[c(10,15)] <- 1
r6$color[c(9,10,15)] <- 1
r7$color[c(8,11,14)] <- 1
r8$color[c(7,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(10,15)] <- 1
r5$color[c(9,10,15)] <- 1
r6$color[c(8,10,15)] <- 1
r7$color[c(7,11,14)] <- 1
r8$color[c(6,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(9,10,15)] <- 1
r4$color[c(8,10,15)] <- 1
r5$color[c(7,10,15)] <- 1
r6$color[c(6,10,15)] <- 1
r7$color[c(5,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r0 <- list(r=rep('r0',20),pixels = 1:20,color = rep(0,20))
r1 <- list(r=rep('r1',20),pixels = 1:20,color = rep(0,20))
r2 <- list(r=rep('r2',20),pixels = 1:20,color = rep(0,20))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r0,r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal()
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() + theme(legend.position = 'none')
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank())
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank(), axis.text = element_blank())
r0 <- list(r=rep('r0',20),pixels = 1:20,color = rep(0,20))
r1 <- list(r=rep('r1',20),pixels = 1:20,color = rep(0,20))
r2 <- list(r=rep('r2',20),pixels = 1:20,color = rep(0,20))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r0,r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank())
getwd()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/FIB/IQL/project/IQL-Research-Project-21-22/code")
library('here')
# import data
langs_df    <- read.csv(here("pud_data/utils/PUD_languages.csv")) %>% `colnames<-` (c("language","iso"))
library('dplyr')
# import data
langs_df    <- read.csv(here("pud_data/utils/PUD_languages.csv")) %>% `colnames<-` (c("language","iso"))
langs       <- langs_df$language
langs
library('ISOcodes')
ISO <- sapply(langs,function(l) ISO_639_3 %>% filter(Name==l) %>% dplyr::select(1)) %>% unlist() %>% unname() #%>% sort()
labs <- langs; names(labs) <- ISO
labs
language <- "Czech"
labs[language]
labs$"Czech"
labs[names(labs) == "Czech"]
labs$`ara`
ISO
ISO[langs == language]
# functions
open_df <- function(language) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
read.csv(paste0("data/",iso_language,".csv"))
}
# bind all dfs and add language
res <- lapply(langs, function(lang) open_df(lang)[-1])
# functions
open_df <- function(language) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
read.csv(paste0(here("pud_data/",iso_language,"_pud.csv")))
}
# functions
read_df <- function(language, strokes) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
read.csv(paste0(here("pud_data/",iso_language,"_pud",str_suffix,".csv")))
}
# functions
read_df <- function(language, strokes=T) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
read.csv(paste0(here("pud_data/",iso_language,"_pud",str_suffix,".csv")))
}
# bind all dfs and add language
res <- lapply(langs, function(lang) read_df(lang)[-1])
# functions
read_df <- function(language, strokes=T) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
read.csv(here("pud_data",paste0(iso_language,"_pud",str_suffix,".csv")))
}
# bind all dfs and add language
res <- lapply(langs, function(lang) read_df(lang)[-1])
all_df <- do.call(rbind,res) %>%
mutate(index=1:nrow(.),language = rep(langs,sapply(res, nrow))) %>%
filter(length != 0)
# identify obs to mark (sample top 90% percentile of freq and length)
top_freq_id <- all_df %>% group_by(language) %>%
group_modify(~head(.x,2)) %>% dplyr::select(index)
all_df
# identify obs to mark (sample top 90% percentile of freq and length)
top_freq_id <- all_df %>% group_by(language) %>%
group_modify(~head(.x,2)) %>% dplyr::select(index)
top_length_id <- all_df %>% arrange(desc(length)) %>%
group_by(language) %>% group_modify(~head(.x,2)) %>% dplyr::select(index)
all_df$lab <- ifelse(all_df$index %in% c(top_freq_id$index,top_length_id$index),
all_df$word,"")
lang_to_use <- subset(all_df, language %in% c("Turkish","Czech","Italian","Russian","Icelandic","German"))
library('ggplot2')
plot <- ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
geom_text_repel(max.overlaps = 10)
require("ggrepel")
plot <- ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
geom_text_repel(max.overlaps = 10)
plot
plot <- ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
geom_text_repel(max.overlaps = 10)
plot
ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
#geom_text_repel(max.overlaps = 10) +
scale_y_log10
ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
#geom_text_repel(max.overlaps = 10) +
scale_y_log10()
ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
#geom_text_repel(max.overlaps = 10) +
scale_y_log10() + scale_x_log()
ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
#geom_text_repel(max.overlaps = 10) +
scale_y_log10() + scale_x_log10()
plot <- ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
geom_text_repel(max.overlaps = 10) +
scale_y_log10() + scale_x_log10()
plot
lang_to_use <- subset(all_df, language %in% c("Turkish","Czech","Chinese","Russian","Japanese","German"))
warnings()
plot <- ggplot(lang_to_use,aes(x=frequency,y=length,label = lab)) +
geom_point(color = ifelse(lang_to_use$lab != "",  "red","grey50")) + facet_wrap(~language) +
geom_text_repel(max.overlaps = 10) +
scale_y_log10() + scale_x_log10()
plot
lang <- 'ita'
warnings()
lang <- 'ita'
df         <- read_df(lang)[-1] %>% mutate(rank=1:nrow(.))
df
Lmin  <- sum(sort(df$length, decreasing=T)*p)                         # min baseline
N_types    <- nrow(df)
p <- df$frequency/sum(df$frequency)
Lmin  <- sum(sort(df$length, decreasing=T)*p)                         # min baseline
Lmin
L
L     <- sum(df$length*p)                                                      # real value (weight by freq)
L
Lmin  <- sum(sort(df$length)*p)                         # min baseline
Lmin
res <- lapply(langs, function(lang) {
df         <- read_df(lang)[-1] %>% mutate(rank=1:nrow(.))
N_types    <- nrow(df)
p <- df$frequency/sum(df$frequency)
Lmin  <- sum(sort(df$length)*p)                                                # min baseline
L     <- sum(df$length*p)                                                      # real value (weight by freq)
Lrand <- sum(df$length)/N_types                                                # random baseline (unweighted)
eta   <- Lmin/L
omega <- (Lrand-L)/(Lrand-Lmin)
list("language"=lang, "Lmin"=Lmin, "L"=L, "Lrand"=Lrand, "eta"=eta,"omega"=omega)
})
opt_df <- do.call(rbind.data.frame,res)
opt_df
# functions
read_df <- function(language, collection, strokes=T) {
iso_language <- if (language %in% langs) ISO[langs == language] else language
if (collection == 'pud') {
str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
read.csv(here("pud_data",paste0(iso_language,"_pud",str_suffix,".csv")))
}
}
compute_optimality_scores <- function(collection) {
res <- lapply(langs, function(lang) {
df         <- read_df(lang,collection)[-1] %>% mutate(rank=1:nrow(.))
N_types    <- nrow(df)
p <- df$frequency/sum(df$frequency)
Lmin  <- sum(sort(df$length)*p)                                                # min baseline
L     <- sum(df$length*p)                                                      # real value (weight by freq)
Lrand <- sum(df$length)/N_types                                                # random baseline (unweighted)
eta   <- Lmin/L
omega <- (Lrand-L)/(Lrand-Lmin)
list("language"=lang, "Lmin"=Lmin, "L"=L, "Lrand"=Lrand, "eta"=eta,"omega"=omega)
})
do.call(rbind.data.frame,res)
}
# save df
opt_df <- compute_optimality_scores('pud')
opt_df
langs_pud  <- langs_df$language
ISO_pud    <- sapply(langs_pud,function(l) ISO_639_3 %>% filter(Name==l) %>% dplyr::select(1)) %>% unlist() %>% unname()
# functions
read_df <- function(language, collection, strokes=T) {
iso_language <- if (language %in% langs_pud) ISO_pud[langs_pud == language] else ISO_cvfa
if (collection == 'pud') {
str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
read.csv(here("pud_data",paste0(iso_language,"_pud",str_suffix,".csv")))
} else if (collection == 'cvfa') {
#str_suffix <- ifelse(strokes == T & iso_language %in% c('zho','jpn'),'_strokes','')
#read.csv(here("code/common-voice-forced-alignments",paste0(iso_language,"_pud",str_suffix,".csv")))
}
}
source('R_function.R')
source('R_functions.R')
# - 1 - Compute Omega
opt_df <- compute_optimality_scores('pud')
compute_optimality_scores <- function(collection) {
langs <- if (collection == 'pud') langs_pud
res <- lapply(langs, function(lang) {
df         <- read_df(lang,collection)[-1] %>% mutate(rank=1:nrow(.))
N_types    <- nrow(df)
p <- df$frequency/sum(df$frequency)
Lmin  <- sum(sort(df$length)*p)                                                # min baseline
L     <- sum(df$length*p)                                                      # real value (weight by freq)
Lrand <- sum(df$length)/N_types                                                # random baseline (unweighted)
eta   <- Lmin/L
omega <- (Lrand-L)/(Lrand-Lmin)
list("language"=lang, "Lmin"=Lmin, "L"=L, "Lrand"=Lrand, "eta"=eta,"omega"=omega)
})
do.call(rbind.data.frame,res)
}
# - 1 - Compute Omega
opt_df <- compute_optimality_scores('pud')
opt_df
# - 2 -
compute_tau_corr <- function(collection) {
langs <- if (collection == 'pud') langs_pud
cors <- lapply(langs, function(lang) {
df   <- read_df(lang, collection)
res  <- cor.test(df$frequency,df$length, method="kendall",alternative = "less")                          # test statistics
list("language"=lang,"tau"=res$estimate,"pvalue"=res$p.value)
})
df <- do.call(rbind.data.frame,cors) %>%
arrange(pvalue) %>% mutate(index=1:nrow(.)) %>%  # Holm-Bonferroni correction
mutate(hb_pvalue = pvalue*(nrow(.)+1-index), index = NULL)
return(df)
}
compute_tau_corr(collection)
collection <- 'pud'
compute_tau_corr(collection)
opt_df
# - 3 - Sorting languages by their degree of optimality
rank_omega <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega=1:nrow(opt_df))
rank_eta <- opt_df %>% arrange(desc(eta)) %>% dplyr::select(language) %>% mutate(ranking_eta=1:nrow(opt_df))
rank_omega
rank_eta
merge(opt_df,rank_eta) %>% merge(rank_omega) %>% mutate(rank_diff = ranking_eta-ranking_omega)
# - 3 - Sorting languages by their degree of optimality
add_rankings <- function(optimality_df) {
rank_omega   <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega=1:nrow(opt_df))
rank_eta     <- opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking_eta=1:nrow(opt_df))
merge(opt_df,rank_eta) %>% merge(rank_omega)    %>% mutate(rank_diff = ranking_eta-ranking_omega)
}
add_rankings(opt_df)
add_rankings <- function(optimality_df) {
rank_omega   <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega=1:nrow(opt_df))
rank_eta     <- opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking_eta=1:nrow(opt_df))
df <- merge(opt_df,rank_eta) %>% merge(rank_omega)    %>% mutate(rank_diff = ranking_eta-ranking_omega)
return(df)
}
# - 3 - Sorting languages by their degree of optimality
add_rankings(opt_df)
get_ranking <- function(opt_df, metric) {
rank_df  <- opt_df %>% arrange(desc(metric)) %>% dplyr::select(language) %>% mutate(ranking=1:nrow(opt_df))
return(rank_df)
}
# - 3 - Sorting languages by their degree of optimality
opt_ranks_df <- get_ranking(opt_df,'omega')
opt_ranks_df
# - 3 - Sorting languages by their degree of optimality
opt_ranks_df <- get_ranking(opt_df,'eta')
opt_ranks_df
get_ranking(opt_df,'eta')
metric <- 'omega'
opt_df %>% arrange(desc(metric)) %>% dplyr::select(language) %>% mutate(ranking=1:nrow(opt_df))
metric <- 'eta'
opt_df %>% arrange(desc(metric)) %>% dplyr::select(language) %>% mutate(ranking=1:nrow(opt_df))
get_ranking <- function(opt_df, metric) {
if (metric == 'omega') {
opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking=1:nrow(opt_df))
} else if (metric == 'eta') {
opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking=1:nrow(opt_df))
}
}
# - 3 - Sorting languages by their degree of optimality
opt_ranks_df <- get_ranking(opt_df,'eta')
opt_ranks_df
# - 3 - Sorting languages by their degree of optimality
opt_ranks_df <- get_ranking(opt_df,'omega')
opt_ranks_df
langs_omega <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega =1:nrow(opt_df))
langs_eta   <- opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking_eta   =1:nrow(opt_df))
langs_omega
langs_omega <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>%
mutate(language_rank_omega = language, ranking_omega =1:nrow(opt_df))
langs_omega
langs_omega <- opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>%
mutate(ranking_omega = 1:nrow(opt_df)) %>% rename(language_rank_omega = language)
langs_eta   <- opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>%
mutate(ranking_eta   = 1:nrow(opt_df)) %>% rename(language_rank_eta   = language)
langs_omega
get_ranking <- function(opt_df, metric) {
if (metric == 'omega') {
opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>%
mutate(ranking_omega = 1:nrow(opt_df)) %>% rename(language_rank_omega = language)
} else if (metric == 'eta') {
opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>%
mutate(ranking_eta   = 1:nrow(opt_df)) %>% rename(language_rank_eta   = language)
}
}
# - 3 - Sorting languages by their degree of optimality
ranks_omega <- get_ranking(opt_df,'omega')
ranks_omega
ranks_eta   <- get_ranking(opt_df,'eta')
ranks_eta
get_ranking <- function(opt_df, metric) {
if (metric == 'omega') {
opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>%
mutate(ranking_omega = 1:nrow(opt_df))
} else if (metric == 'eta') {
opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>%
mutate(ranking_eta   = 1:nrow(opt_df))
}
}
get_ranking <- function(opt_df, metric) {
if (metric == 'omega') {
opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega = 1:nrow(opt_df))
} else if (metric == 'eta') {
opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking_eta   = 1:nrow(opt_df))
}
}
# - 3 - Sorting languages by their degree of optimality
ranks_omega <- get_ranking(opt_df,'omega')$language
ranks_eta   <- get_ranking(opt_df,'eta')$language
ranks_omega
# - 3 - Sorting languages by their degree of optimality
rank_omega <- get_ranking(opt_df,'omega')$language
rank_eta   <- get_ranking(opt_df,'eta')$language
get_ranked_langs <- function(opt_df, metric) {
if (metric == 'omega') {
opt_df %>% arrange(desc(omega)) %>% dplyr::select(language) %>% mutate(ranking_omega = 1:nrow(opt_df))
} else if (metric == 'eta') {
opt_df %>% arrange(desc(eta))   %>% dplyr::select(language) %>% mutate(ranking_eta   = 1:nrow(opt_df))
}
}
# - 3 - Sorting languages by their degree of optimality
rank_omega <- get_ranked_langs(opt_df,'omega')$language
rank_eta   <- get_ranked_langs(opt_df,'eta')$language
plotRanks <- function(a, b, labels.offset=0.1, arrow.len=0.1,title) {
old.par <- par(mar=c(1,1,1,1))
a <- rev(a)
b <- rev(b)
# Find the length of the vectors
len.1 <- length(a)
len.2 <- length(b)
# Plot two columns of equidistant points
plot(rep(1, len.1), 1:len.1, pch=20, cex=0.8,
xlim=c(0, 3), ylim=c(0, max(len.1, len.2)),
axes=F, xlab="", ylab="",main=title) # Remove axes and labels
points(rep(2, len.2), 1:len.2, pch=20, cex=0.8)
# Put labels next to each observation
text(rep(1-labels.offset, len.1), 1:len.1, a)
text(rep(2+labels.offset, len.2), 1:len.2, b)
# Map where the elements of a are in b
a.to.b <- match(a, b)
# Now we can draw arrows from the first column to the second
arrows(rep(1.02, len.1), 1:len.1, rep(1.98, len.2), a.to.b,
length=arrow.len, angle=20)
par(old.par)
}
plotRanks(rank_eta, rank_omega, labels.offset=0.35, title="Eta  -  Omega")
