r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(9,10,15)] <- 1
r4$color[c(8,10,15)] <- 1
r5$color[c(7,10,15)] <- 1
r6$color[c(6,10,15)] <- 1
r7$color[c(5,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
r0 <- list(r=rep('r0',20),pixels = 1:20,color = rep(0,20))
r1 <- list(r=rep('r1',20),pixels = 1:20,color = rep(0,20))
r2 <- list(r=rep('r2',20),pixels = 1:20,color = rep(0,20))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r0,r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color))
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal()
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() + theme(legend.position = 'none')
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank())
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank(), axis.text = element_blank())
r0 <- list(r=rep('r0',20),pixels = 1:20,color = rep(0,20))
r1 <- list(r=rep('r1',20),pixels = 1:20,color = rep(0,20))
r2 <- list(r=rep('r2',20),pixels = 1:20,color = rep(0,20))
r3 <- list(r=rep('r3',20),pixels = 1:20,color = rep(0,20))
r4 <- list(r=rep('r4',20),pixels = 1:20,color = rep(0,20))
r5 <- list(r=rep('r5',20),pixels = 1:20,color = rep(0,20))
r6 <- list(r=rep('r6',20),pixels = 1:20,color = rep(0,20))
r7 <- list(r=rep('r7',20),pixels = 1:20,color = rep(0,20))
r8 <- list(r=rep('r8',20),pixels = 1:20,color = rep(0,20))
r9 <- list(r=rep('r9',20),pixels = 1:20,color = rep(0,20))
r1$color[5:15] <- 1
r2$color[5:15] <- 1
r3$color[c(10,15)] <- 1
r4$color[c(9,10,15)] <- 1
r5$color[c(8,10,15)] <- 1
r6$color[c(7,10,15)] <- 1
r7$color[c(6,11,14)] <- 1
r8$color[c(5,12,13)] <- 1
big_list <- list(r0,r1,r2,r3,r4,r5,r6,r7,r8,r9)
do.call(rbind.data.frame,big_list) %>%
ggplot() + geom_tile(aes(r,pixels,fill=color)) + theme_minimal() +
theme(legend.position = 'none',axis.title = element_blank())
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Projects/MyWebsite/AnalyseTheWorld')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Projects/MyWebsite/AnalyseTheWorld')
shiny::runApp('Library/Mobile Documents/com~apple~CloudDocs/Projects/MyWebsite/AnalyseTheWorld')
source('code/analysis/R_functions.R', encoding="utf-8")
setwd("/Users/sonia/Library/Mobile Documents/com~apple~CloudDocs/FIB/IQL/IQLproject/IQL-Research-Project-21-22")
source('code/analysis/R_functions.R', encoding="utf-8")
filter <- T
# GLOBALS  --------------------------------------------------------
langs_df_pud <- read.csv(paste0(which_folder('data',filter),"/descriptive_tables/pud.csv"))
langs_df_cv <- read.csv(paste0(which_folder('data',filter),"/descriptive_tables/common_voice.csv")) %>%
shorten_names()
collection <- 'pud'
length_def <- 'characters'
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# c)
# recompute tau and tau_min
cors <- lapply(df$languages, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=res$estimate, "tau_min"=corr_min)
})
df_newcor <- do.call(rbind.data.frame,cors)
df_newcor
df$languages
df$language
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=res$estimate, "tau_min"=corr_min)
})
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=res$estimate, "tau_min"=corr_min)
})
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=corr$estimate, "tau_min"=corr_min)
})
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=corr, "tau_min"=corr_min)
})
language <- "Chinese-pinyin"
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
iso_code <- langs_df_pud$iso_code[langs_df_pud$language==language]
iso_code
alternative <- if (stringr::str_detect(language,'-')) sub(".*-","",language) else NULL
alternative
str_suffix <- ifelse (is.null(alternative),'',paste0('_',alternative))
str_suffix
read.csv(paste0(folder,collection,'/',iso_code,"_pud",str_suffix,".csv"), encoding = 'UTF-8') %>%
arrange(desc(frequency))
folder <- if (filtered==T) 'data/filtered/corpora/' else 'data/non_filtered/corpora/'
filtered=TRUE
folder <- if (filtered==T) 'data/filtered/corpora/' else 'data/non_filtered/corpora/'
read.csv(paste0(folder,collection,'/',iso_code,"_pud",str_suffix,".csv"), encoding = 'UTF-8') %>%
arrange(desc(frequency))
read_language <- function(language, collection, remove_vowels=FALSE, filtered=TRUE) {
folder <- if (filtered==T) 'data/filtered/corpora/' else 'data/non_filtered/corpora/'
if(!remove_vowels){
if (collection == 'cv') {
iso_code <- langs_df_cv$iso_code[langs_df_cv$language==language]
read.csv(paste0(folder,collection,'/',iso_code,"-word.csv"), encoding = 'UTF-8') %>%
arrange(desc(frequency))
} else if (collection == 'pud') {
iso_code <- langs_df_pud$iso_code[langs_df_pud$language==language]
alternative <- if (stringr::str_detect(language,'-')) sub(".*-","",language) else NULL
str_suffix <- ifelse (is.null(alternative),'',paste0('_',alternative))
read.csv(paste0(folder,collection,'/',iso_code,"_pud",str_suffix,".csv"), encoding = 'UTF-8') %>%
arrange(desc(frequency))
} else print('specify an available collection')
}
else {
if(langs_df_pud$script[langs_df_pud$language==language]=='Latin'){
iso_code    <- langs_df_pud$iso_code[langs_df_pud$language==language]
alternative <- if(iso_code=='zho') "pinyin" else if(iso_code=='jpn') "romaji" else NULL   # file suffix
str_suffix  <- ifelse (is.null(alternative),'',paste0('_',alternative))
df          <- read.csv(paste0(folder,collection,'/',iso_code,"_pud",str_suffix,".csv"), encoding = 'UTF-8')[-1]
df$word     <- if(iso_code=='zho' | iso_code=='jpn') df$romanized_form else df$word      # word <- Latin script
# remove vowels
df$word   <- do_remove_vowels(iso_code,df$word)
df$length <- nchar(df$word)
cat("number of length 0:",length(which(df$length==0)),
"\nrows:", which(df$length==0), "\n")
df
} else print("Please specify a language of latin script")
}
}
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, sort(df$length))
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=corr, "tau_min"=corr_min)
})
df_newcor <- do.call(rbind.data.frame,cors)
df_newcor
# recompute tau and tau_min
cors <- lapply(df$language, function(language) {
print(language)
df <- read_language(language,collection,remove_vowels=F,filter) %>% mutate(rank=1:nrow(.))
# definition of length
df$length <- if (collection == 'cv') {
switch(length, 'meanDuration'=df$meanDuration,'medianDuration'=df$medianDuration,'characters'=df$n_characters)
} else if (collection == 'pud') df$n_characters
# compute corr and pvalue
corr <- cor.fk(df$frequency, df$length)
# compute minimum correlation
corr_min <- cor.fk(df$frequency, sort(df$length))
list("language"=language, "tau"=corr, "tau_min"=corr_min)
})
df_newcor <- do.call(rbind.data.frame,cors)
df_newcor
read_language(language,collection,remove_vowels=F,filter)
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# c)
ggplot(df,aes(y=tau_min, x=tau, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20))
# a)
ggplot(df,aes(y=Lmin, x=L, label=language,color=color)) + geom_point(size=2) + labs(y=bquote(L[min])) +
geom_abline(slope=1, intercept=0, color = 'purple', size = 1) + geom_text_repel(size=4) +
theme(text = element_text(size = 20)) + scale_color_manual(values = c("real" = "black", "control" = "red"))
# a)
ggplot(df,aes(y=Lmin, x=L, label=language,color=color)) + geom_point(size=2) + labs(y=bquote(L[min])) +
geom_abline(slope=1, intercept=0, color = 'purple', size = 1) + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
# b)
df %>% mutate(`Lr-Lmin`=Lrand-Lmin, `Lr-L`=Lrand-L) %>%
ggplot(aes(x=`Lr-Lmin`, y=`Lr-L`, label=language,color=color)) + geom_point(size=2) +
labs(x=bquote(L[r]-L[min]), y = bquote(L[r]-L)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20),, legend.position = 'none') + scale_color_manual(values = c("real" = "black", "control" = "red"))
# c)
ggplot(df,aes(y=tau_min, x=tau, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
plot_scores_ingredients <- function(filter, collection, length_def) {
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# a)
ggplot(df,aes(y=Lmin, x=L, label=language,color=color)) + geom_point(size=2) + labs(y=bquote(L[min])) +
geom_abline(slope=1, intercept=0, color = 'purple', size = 1) + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/a_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# b)
df %>% mutate(`Lr-Lmin`=Lrand-Lmin, `Lr-L`=Lrand-L) %>%
ggplot(aes(x=`Lr-Lmin`, y=`Lr-L`, label=language,color=color)) + geom_point(size=2) +
labs(x=bquote(L[r]-L[min]), y = bquote(L[r]-L)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/b_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# c)
ggplot(df,aes(y=tau_min, x=tau, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/c_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
}
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
plot_scores_ingredients(filter, collection, length_def)
})
} else {
length_def <- 'characters'
plot_scores_ingredients(filter, collection, length_def)
}
})
warnings()
score <- 'psi'
opt_df <- read_file('opt','pud',filter,length_def)
# plot 2
plot_score_composition(score,opt_df)
ggsave(paste0(which_folder('figures',filter),'/',score,'_composition_pud_',length_def,'.pdf'),
width = 4, height = 5)
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
df
df %>% mutate(tau=-tau, tau_min=-tau_min)
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggplot(df, aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
df %>% mutate(tau=-tau, tau_min=-tau_min)
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(df, aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
df %>% mutate(tau=-tau, tau_min=-tau_min)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2)
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + #scale_y_continuous(limits = c(-0.9, 0)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(y=expression(tau[min]), x=expression(tau)) + scale_y_continuous(limits = c(0,1)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(x=expression(tau[min]), y=expression(tau)) + scale_y_continuous(limits = c(0,1)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
plot_scores_ingredients <- function(filter, collection, length_def) {
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# a)
ggplot(df,aes(y=Lmin, x=L, label=language,color=color)) + geom_point(size=2) + labs(y=bquote(L[min])) +
geom_abline(slope=1, intercept=0, color = 'purple', size = 1) + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/a_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# b)
df %>% mutate(`Lr-Lmin`=Lrand-Lmin, `Lr-L`=Lrand-L) %>%
ggplot(aes(x=`Lr-Lmin`, y=`Lr-L`, label=language,color=color)) + geom_point(size=2) +
labs(x=bquote(L[r]-L[min]), y = bquote(L[r]-L)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/b_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(x=expression(tau[min]), y=expression(tau)) + scale_y_continuous(limits = c(0,1)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/c_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
}
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(x=expression(-tau[min]), y=expression(-tau)) + scale_y_continuous(limits = c(0,1)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
plot_scores_ingredients <- function(filter, collection, length_def) {
df <- read_file('opt',collection,filter,length_def) %>% select(language, L,Lmin,Lrand,tau_min,tau)
# add control points
df_control <- df %>% mutate(L=Lrand, tau=0, language='')
df <- rbind(df,df_control) %>% mutate(color=ifelse(language=='','control','real'))
# a)
ggplot(df,aes(y=Lmin, x=L, label=language,color=color)) + geom_point(size=2) + labs(y=bquote(L[min])) +
geom_abline(slope=1, intercept=0, color = 'purple', size = 1) + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/a_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# b)
df %>% mutate(`Lr-Lmin`=Lrand-Lmin, `Lr-L`=Lrand-L) %>%
ggplot(aes(x=`Lr-Lmin`, y=`Lr-L`, label=language,color=color)) + geom_point(size=2) +
labs(x=bquote(L[r]-L[min]), y = bquote(L[r]-L)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/b_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
# c)
df %>% mutate(tau=-tau, tau_min=-tau_min) %>%
ggplot(aes(y=tau, x=tau_min, label=language,color=color)) + geom_point(size=2) +
labs(x=expression(-tau[min]), y=expression(-tau)) + scale_y_continuous(limits = c(0,1)) +
geom_abline(slope=1, intercept=0, color = 'purple') + geom_text_repel(size=4) +
theme(text = element_text(size = 20), legend.position = 'none') +
scale_color_manual(values = c("real" = "black", "control" = "red"))
ggsave(paste0(which_folder('figures',filter),'/c_',collection,"_",length_def,'.pdf'),
device = cairo_pdf, width = 6, height = 8)
}
rows <- lapply(COLLS, function(collection) {
if (collection == 'cv') {
lapply(length_defs, function(length_def) {
plot_scores_ingredients(filter, collection, length_def)
})
} else {
length_def <- 'characters'
plot_scores_ingredients(filter, collection, length_def)
}
})
