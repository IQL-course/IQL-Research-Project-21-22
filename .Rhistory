}
}
bestMDS=lmds(delta=as.matrix(dist0s), ndim=2, k=K[optimK], tau=tau[optimTau])
plot(bestMDS)
print(optimK)
print(optimTau)
print(optimK)
bestMDS=lmds(delta=as.matrix(dist0s), ndim=2, k=K[optimK], tau=tau[optimTau])
bestMDS=lmds(delta=as.matrix(dist0s), ndim=2, k=K[optimK], tau=tau[optimTau])
plot(bestMDS)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
plinkstring = "plink --bfile CHD --recodeA --out CHD"
system(plinkstring)
library(genetics)
library(data.table)
data=as.data.frame(fread("CHD.raw",sep = " ",header = TRUE))
print(data)
print(data[5,])
print(data[,5:])
print(data[,5])
print(data[,5:length(data)])
print(data[,7:length(data)])
print(data[,6:length(data)])
print(data[,7:length(data)])
print(data)
print(data[,7:length(data)])
manhattanDistMat=dist(data[,7:length(data)],method ="manhattan")
print(data)
print(data[,7:length(data)])
manhattanDistMat=dist(data[,7:length(data)],method ="manhattan")
manhattanDistMat=as.matrix(manhattanDistMat)
n=nrow(data[,7:length(data)])
mds.out <- cmdscale(manhattanDistMat,k=n-1,eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2],asp=1,xlab="First principal axis",
ylab="Second principal axis")
print(data)
print(data[,7:length(data)])
manhattanDistMat=dist(data[,7:length(data)],method ="manhattan")
manhattanDistMat=as.matrix(manhattanDistMat)
n=nrow(data)
mds.out <- cmdscale(manhattanDistMat,k=n-1,eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2],asp=1,xlab="First principal axis",
ylab="Second principal axis")
manhattanDistMat=dist(data[,7:length(data)],method ="manhattan")
manhattanDistMat=as.matrix(manhattanDistMat)
n=nrow(data)
mds.out <- cmdscale(manhattanDistMat,k=n-1,eig=TRUE)
X <- mds.out$points[,1:2]
plot(X[,1],X[,2],asp=1,xlab="First principal axis",
ylab="Second principal axis")
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
Dmean <- matrix(NA,nrow=n,ncol=n)
Dsd <- matrix(NA,nrow=n,ncol=n)
#
# calculate m,s for each pair of individuals
#
for(i in 7:n) {
for(j in i:n) {
aux1=ibs.mean(data[i,],data[j,])
aux2=ibs.sd(data[i,],data[j,])
Dmean[i,j] <- aux1
Dsd[i,j] <- aux2
Dmean[j,i] <- aux1
Dsd[j,i] <- aux2
}
}
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
Dmean <- matrix(NA,nrow=n,ncol=n)
Dsd <- matrix(NA,nrow=n,ncol=n)
#
# calculate m,s for each pair of individuals
#
for(i in 7:n) {
for(j in i:n) {
aux1=ibs.mean(data[i,],data[j,])
aux2=ibs.sd(data[i,],data[j,])
Dmean[i,j] = aux1
Dsd[i,j] = aux2
Dmean[j,i] = aux1
Dsd[j,i] = aux2
}
}
ibs.mean <- function(x,y) {
y <- mean(2 - abs(x - y),na.rm=TRUE)
return(y)
}
ibs.sd <- function(x,y) {
y <- sd(abs(x-y),na.rm=TRUE)
return(y)
}
Dmean <- matrix(NA,nrow=n,ncol=n)
Dsd <- matrix(NA,nrow=n,ncol=n)
#
# calculate m,s for each pair of individuals
#
for(i in 1:n) {
for(j in i:n) {
aux1=ibs.mean(data[i,7:length(data)],data[j,7:length(data)])
aux2=ibs.sd(data[i,7:length(data)],data[j,7:length(data)])
Dmean[i,j] = aux1
Dsd[i,j] = aux2
Dmean[j,i] = aux1
Dsd[j,i] = aux2
}
}
View(data)
View(data)
View(data)
tinytex::install_tinytex()
install.packages("Rcpp")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
unlink("E://P072021_Relatedness_cache", recursive = TRUE)
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
tinytex::install_tinytex()
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,1)
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,1)
points(0.5,0.5)
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,1,col="Green")
points(0.5,0.5,col="Blue")
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Violet")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("Red line, blue points","Green line, purple points"),
col=c("red","blue","green","purple"), lwd=1, lty=c(1,2),
pch=c(15,17), merge=FALSE )
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lwd=1,merge=FALSE )
relations=which(Z$Z0<0.6,arr.ind = TRUE)
tableToShow=matrix(NA,nrow=3,ncol=5)
colnames(tableToShow) <- c("Individual 1","Individual 2","Z0","Z1","Z2")
counter=1
for (val in relations) {
tableToShow[counter,1]=which(data$IID==Z$IID1[val])
tableToShow[counter,2]=which(data$IID==Z$IID2[val])
tableToShow[counter,3]=Z$Z0[val]
tableToShow[counter,4]=Z$Z1[val]
tableToShow[counter,5]=Z$Z2[val]
counter=counter+1
}
print(tableToShow)
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lwd=1,merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"),merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lty=0,merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lty=1,merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lty=NULL,merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN, PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lty=NULL,pch=1,merge=FALSE )
runstring = "plink --bfile CHD --genome --genome-full --out CHD"
system(runstring)
Z <- read.table("CHD.genome",header=TRUE)
plot(Z$Z0,Z$Z1)
points(0,0,col="Green")
points(0,1,col="Blue")
points(0.25,0.5,col="Purple")
points(0.5,0.5,col="Yellow")
points(1,0,col="Red")
legend( x="topright",
legend=c("UN", "PO","MZ","FS","HS|AV|GG"),
col=c("red","blue","green","purple","yellow"), lty=NULL,pch=1,merge=FALSE )
data$PAT!=0
data$MAT!=0
library(data.table)
data=as.data.frame(fread("CHD.raw",sep = " ",header = TRUE))
pureData=data[,7:length(data)]
sum(data$PAT!=0)
sum(data$MAT!=0)
library(HardyWeinberg)
geno=genotype(data$Mm,sep="")
library(genetics)
library(data.table)
data=as.data.frame(fread("rs394221.dat",sep = " ",header = TRUE))
print(sum(data$case=="case"))
print(sum(data$case=="control"))
contTable=table(data)
print(contTable)
library(HardyWeinberg)
geno=genotype(data$Mm,sep="")
tableGeno=table(geno)
rownames(tableGeno) <- c("AA","AB","BB")
res=HWChisq(tableGeno[1:3],cc=0,verbose = FALSE)
print(res)
library(vegan)
library(vegan)
library(ggplot2)
library(viridis)
head(orders)
orders <- read.csv("condensed_order.csv", header = TRUE)
head(orders)
nmds_results <- metaMDS(comm = orders[ , 4:11], # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
orders <- read.csv("condensed_order.csv", header = TRUE)
head(orders)
nmds_results <- metaMDS(comm = orders[ , 4:11], # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
packageVersion("vegan")
library(datasets)
orders=data(iris)
head(orders)
nmds_results <- metaMDS(comm = orders[ , 4:11], # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
nmds_results <- metaMDS(comm = orders, # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
library(vegan)
library(ggplot2)
library(viridis)
library(datasets)
orders=data(iris)
packageVersion("vegan")
orders <- read.csv("condensed_order.csv", header = TRUE)
orders=data(iris)
orders=data(iris)
packageVersion("vegan")
head(orders)
nmds_results <- metaMDS(comm = orders, # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
data(iris)
force(iris)
nmds_results <- metaMDS(comm = iris, # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
data(iris)
orders=data(iris)
nmds_results <- metaMDS(comm = iris, # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
nmds_results <- metaMDS(comm = iris[1:4], # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
data_scores <- as.data.frame(scores(nmds_results))
plot(nmds_results)
points=nmds_results$points
library(vegan)
library(ggplot2)
library(viridis)
library(datasets)
orders=data(iris)
data(iris)
packageVersion("vegan")
head(orders)
nmds_results <- metaMDS(comm = iris[1:4], # Define the community data
distance = "bray", # Specify a bray-curtis distance
try = 100) # Number of iterations
data_scores <- as.data.frame(scores(nmds_results))
points=nmds_results$points
plot(points)
plot(nmds_results)
plot(points)
Rscript R_compute_tables.R null 1000000 'job_index'
setwd("C:/Users/tonic/Pictures/IQL-Research-Project-21-22")
Sys.setlocale("LC_ALL","English")
source('code/analysis/R_functions.R', encoding="utf-8")
args = commandArgs(trailingOnly=TRUE)
filter <- if (length(args) == 1) as.logical(args[[1]]) else T
# GLOBALS  --------------------------------------------------------
## pud
langs_df_pud <- read.csv(here(which_folder('data',filter),"descriptive_tables/pud.csv"))
## cv
langs_df_cv <- read.csv(here(which_folder('data',filter),"descriptive_tables/common_voice.csv")) %>%
shorten_names()
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df
print(paste0(here(which_folder('data',filter),'alphabets/',collection,'/alphabet_',iso_code,'.csv')))
write.csv(alphabet, paste0(here(which_folder('data',filter),'alphabets/',collection,'/alphabet_',iso_code,'.csv')))
})
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df
print(paste0(here(which_folder('data',filter)),'alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'alphabets/',collection,'/alphabet_',iso_code,'.csv'))
})
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df
print(paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
})
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df
print(paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
})
})
# + alphabet sizes
print('file: alphabets sizes')
res <- lapply(COLLS,function(collection) {
langs_df <- if (collection == 'pud') langs_df_pud else if (collection == 'cv') langs_df_cv
parameters <- lapply(langs_df$language, function(language) {
df       <- read_language(language,collection,F,filtered=filter)
words    <- if ('romanized_form' %in% colnames(df)) tolower(df$romanized_form) else df$word
alphabet <- unique(unlist(strsplit(words, '')))
alphabet_size <- alphabet %>% length()
list("language"=language, 'A'=alphabet_size)
})
df = do.call(rbind.data.frame,parameters)
write.csv(df, here(which_folder('results',filter),paste0('alphabet_sisez_',collection,'.csv')))
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df[,c(1,2,3)]
print(paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
})
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df[,c(1,2,3)]
print(paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
})
})
# + filter alphabet with k-means
print('file: alphabets')
res <- lapply(COLLS,function(collection) {
iso_codes <- if (collection == 'pud') langs_df_pud$iso_code else if (collection == 'cv') langs_df_cv$iso_code
lapply(iso_codes, function(iso_code) {
df <- read.csv(here('code/preprocessing/',paste0(collection,'/characters/',iso_code,'-character.csv'))) %>%
mutate(Freq=log10(frequencyTot)) %>% arrange(desc(Freq))
df$group_opt <- Ckmeans.1d.dp(df$Freq, 2)$cluster
df <- if (filter == T) filter(df,group_opt == 2) else df
alphabet <- df[,c(1,2,3)]
print(paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'))
write.csv(alphabet, paste0(here(which_folder('data',filter)),'/alphabets/',collection,'/alphabet_',iso_code,'.csv'),row.names = FALSE)
})
})
# + alphabet sizes
print('file: alphabets sizes')
res <- lapply(COLLS,function(collection) {
langs_df <- if (collection == 'pud') langs_df_pud else if (collection == 'cv') langs_df_cv
parameters <- lapply(langs_df$language, function(language) {
df       <- read_language(language,collection,F,filtered=filter)
words    <- if ('romanized_form' %in% colnames(df)) tolower(df$romanized_form) else df$word
alphabet <- unique(unlist(strsplit(words, '')))
alphabet_size <- alphabet %>% length()
list("language"=language, 'A'=alphabet_size)
})
df = do.call(rbind.data.frame,parameters)
write.csv(df, here(which_folder('results',filter),paste0('alphabet_sisez_',collection,'.csv')))
})
